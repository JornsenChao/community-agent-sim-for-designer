# version: '3.8'
services:
  db:
    image: postgis/postgis:15-3.3
    container_name: my_postgis
    restart: always
    environment:
      # 这会创建一个数据库 mydb，用户名myuser，密码mypass。
      POSTGRES_USER: 'myuser'
      POSTGRES_PASSWORD: 'mypassword'
      POSTGRES_DB: 'mydb'
    ports:
      # 原来是 5432:5432. 容器里依旧使用 5432，但本地访问时变成 localhost:5433
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # 一个叫 postgres_data 的Docker volume 来保存数据库文件

  web:
    # 用 ./backend/Dockerfile 文件来构建 Flask 容器。映射端口 5000:5000 到外面。
    build: ./backend
    container_name: my_flask
    restart: always
    ports:
      - '5000:5000'
    depends_on:
      # 要等数据库容器就绪后再启动 web
      - db
    environment:
      IS_DOCKER: '1'
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: 'mydb'
      DB_USER: 'myuser'
      DB_PASS: 'mypassword'

  frontend:
    build: ./frontend
    container_name: my_frontend
    restart: always
    # 如果你用 Next.js / React 端口3000
    ports:
      - '3000:3000'
    depends_on:
      - web
    environment:
      # 方式A: 让前端容器直接访问后端容器的服务名"my_flask:5000"：
      NEXT_PUBLIC_API_BASE_URL: 'http://my_flask:5000'

      # 方式B: 如果你想让前端容器通过宿主机网络来访问:
      #   - 在 Docker Desktop (Mac/Win) 上，可用 host.docker.internal:5000 代替 localhost
      #   - 在 Linux 原生 Docker 上，localhost不会指向宿主机，需要别的配置。
      # NEXT_PUBLIC_API_BASE_URL: 'http://localhost:5000'

      # 注: 如果你只是本地跑Flask，不用docker跑web，
      # 也可以写 'http://localhost:5000' 让前端容器访问宿主机的Flask。
      # 前提是：Docker在Mac/Win用docker desktop, "localhost"可被识别为宿主机，
      # 或者你改为 'http://host.docker.internal:5000'。

volumes:
  # 定义一个名为 postgres_data 的 Docker挂载点，用于持久化数据库内容。
  postgres_data:
